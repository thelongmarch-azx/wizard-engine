// Copyright 2024 Wizard Authors. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

def monitor_ = MonitorRegistry.add(
    "mem-access", "tracks memory access pattern.",
    MemAccessMonitor.new());


class MemAccessMonitor extends Monitor {
    def bi = BytecodeIterator.new();
    var block_access: HashMap<int, int>;
    var mod: Module;

    def onParse(module: Module, err: ErrorGen) {
        mod = module;
        block_access = HashMap<int, int>.new(int.!<int>, int.==);
        MemAccessBytecodeInstrumenter.new(block_access, module).run();
    }
}

private class MemAccessBytecodeInstrumenter extends BytecodeInstrumenter {
    def var block_access: HashMap<int, int>;

    new(block_access: HashMap<int, int>, module: Module) super(module) {
        this.block_access = block_access;
    }

    def visitLoad(op: Opcode, imm: MemArg, size: u8) {
        if (op == Opcode.I32_LOAD || op == Opcode.I64_LOAD) {
            var bi = this.bi;
            insertProbeHere(AccessReadProbe.new(this.block_access, imm, size));
        }
    }
    def visitStore(op: Opcode, imm: MemArg, size: u8) {
        if (op == Opcode.I32_STORE || op == Opcode.I64_STORE) {
            var bi = this.bi;
            insertProbeHere(AccessWriteProbe.new(this.block_access, imm, size));
        }
    }
}

private class AccessWriteProbe extends MemoryWriteProbe {
    def var block_access: HashMap<int, int>;

    new(block_access: HashMap<int, int>, imm: MemArg, size: u8) {
        this.imm = imm;
        this.size = size;
        this.block_access = block_access;
        this.has_fire_probe = true;
    }

    def fire_probe(addr: u64, val: u64, unused_val: u64) {
        var block = int.!(addr / 10000);
        block_access[block]++;
    }
}

private class AccessReadProbe extends MemoryReadProbe {
    def var block_access: HashMap<int, int>;

    new(block_access: HashMap<int, int>, imm: MemArg, size: u8) {
        this.imm = imm;
        this.size = size;
        this.block_access = block_access;
    }

    def fire_probe(addr: u64, val: u64, unused_val: u64) {
        var block = int.!(addr / 10000);
        block_access[block]++;
    }
}
